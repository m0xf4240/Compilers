/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ANewarrayPrimary extends PPrimary
{
    private TNew _new_;
    private TId _id_;
    private TLbrack _lbrack_;
    private PExpr _expr_;
    private TRbrack _rbrack_;
    private final LinkedList<PEmptydim> _emptydim_ = new LinkedList<PEmptydim>();

    public ANewarrayPrimary()
    {
        // Constructor
    }

    public ANewarrayPrimary(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLbrack _lbrack_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRbrack _rbrack_,
        @SuppressWarnings("hiding") List<PEmptydim> _emptydim_)
    {
        // Constructor
        setNew(_new_);

        setId(_id_);

        setLbrack(_lbrack_);

        setExpr(_expr_);

        setRbrack(_rbrack_);

        setEmptydim(_emptydim_);

    }

    @Override
    public Object clone()
    {
        return new ANewarrayPrimary(
            cloneNode(this._new_),
            cloneNode(this._id_),
            cloneNode(this._lbrack_),
            cloneNode(this._expr_),
            cloneNode(this._rbrack_),
            cloneList(this._emptydim_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewarrayPrimary(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLbrack getLbrack()
    {
        return this._lbrack_;
    }

    public void setLbrack(TLbrack node)
    {
        if(this._lbrack_ != null)
        {
            this._lbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrack_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRbrack getRbrack()
    {
        return this._rbrack_;
    }

    public void setRbrack(TRbrack node)
    {
        if(this._rbrack_ != null)
        {
            this._rbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrack_ = node;
    }

    public LinkedList<PEmptydim> getEmptydim()
    {
        return this._emptydim_;
    }

    public void setEmptydim(List<PEmptydim> list)
    {
        this._emptydim_.clear();
        this._emptydim_.addAll(list);
        for(PEmptydim e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._id_)
            + toString(this._lbrack_)
            + toString(this._expr_)
            + toString(this._rbrack_)
            + toString(this._emptydim_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lbrack_ == child)
        {
            this._lbrack_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rbrack_ == child)
        {
            this._rbrack_ = null;
            return;
        }

        if(this._emptydim_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lbrack_ == oldChild)
        {
            setLbrack((TLbrack) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rbrack_ == oldChild)
        {
            setRbrack((TRbrack) newChild);
            return;
        }

        for(ListIterator<PEmptydim> i = this._emptydim_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEmptydim) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
