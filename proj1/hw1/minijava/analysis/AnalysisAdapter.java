/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.*;
import minijava.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAVarMaindecl(AVarMaindecl node)
    {
        defaultCase(node);
    }

    public void caseAMethodMaindecl(AMethodMaindecl node)
    {
        defaultCase(node);
    }

    public void caseAListParamlist(AListParamlist node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParamlist(AEmptyParamlist node)
    {
        defaultCase(node);
    }

    public void caseAParam(AParam node)
    {
        defaultCase(node);
    }

    public void caseAPublicPrivacy(APublicPrivacy node)
    {
        defaultCase(node);
    }

    public void caseABlankPrivacy(ABlankPrivacy node)
    {
        defaultCase(node);
    }

    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    public void caseADeclStmt(ADeclStmt node)
    {
        defaultCase(node);
    }

    public void caseABlockStmt(ABlockStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    public void caseAExprStmt(AExprStmt node)
    {
        defaultCase(node);
    }

    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    public void caseAPrintStmt(APrintStmt node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStmt(AEmptyStmt node)
    {
        defaultCase(node);
    }

    public void caseAAssignExpr(AAssignExpr node)
    {
        defaultCase(node);
    }

    public void caseAExprExpr(AExprExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExpr10(AOrExpr10 node)
    {
        defaultCase(node);
    }

    public void caseAExprExpr10(AExprExpr10 node)
    {
        defaultCase(node);
    }

    public void caseAAndExpr20(AAndExpr20 node)
    {
        defaultCase(node);
    }

    public void caseAExprExpr20(AExprExpr20 node)
    {
        defaultCase(node);
    }

    public void caseAEqExpr30(AEqExpr30 node)
    {
        defaultCase(node);
    }

    public void caseANeExpr30(ANeExpr30 node)
    {
        defaultCase(node);
    }

    public void caseAExprExpr30(AExprExpr30 node)
    {
        defaultCase(node);
    }

    public void caseALtExpr40(ALtExpr40 node)
    {
        defaultCase(node);
    }

    public void caseALeExpr40(ALeExpr40 node)
    {
        defaultCase(node);
    }

    public void caseAGeExpr40(AGeExpr40 node)
    {
        defaultCase(node);
    }

    public void caseAGtExpr40(AGtExpr40 node)
    {
        defaultCase(node);
    }

    public void caseAExprExpr40(AExprExpr40 node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpr50(APlusExpr50 node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpr50(AMinusExpr50 node)
    {
        defaultCase(node);
    }

    public void caseATermExpr50(ATermExpr50 node)
    {
        defaultCase(node);
    }

    public void caseATimesTerm(ATimesTerm node)
    {
        defaultCase(node);
    }

    public void caseADivTerm(ADivTerm node)
    {
        defaultCase(node);
    }

    public void caseAModTerm(AModTerm node)
    {
        defaultCase(node);
    }

    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryFactor(APrimaryFactor node)
    {
        defaultCase(node);
    }

    public void caseAIdFactor(AIdFactor node)
    {
        defaultCase(node);
    }

    public void caseALengthFactor(ALengthFactor node)
    {
        defaultCase(node);
    }

    public void caseALength2Factor(ALength2Factor node)
    {
        defaultCase(node);
    }

    public void caseANewarrayPrimary(ANewarrayPrimary node)
    {
        defaultCase(node);
    }

    public void caseAPrimary2Primary(APrimary2Primary node)
    {
        defaultCase(node);
    }

    public void caseAIconstPrimary2(AIconstPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseASconstPrimary2(ASconstPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseANullPrimary2(ANullPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseATruePrimary2(ATruePrimary2 node)
    {
        defaultCase(node);
    }

    public void caseAFalsePrimary2(AFalsePrimary2 node)
    {
        defaultCase(node);
    }

    public void caseAParensPrimary2(AParensPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseACallPrimary2(ACallPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseAArrayrefPrimary2(AArrayrefPrimary2 node)
    {
        defaultCase(node);
    }

    public void caseANameArrayref(ANameArrayref node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryArrayref(APrimaryArrayref node)
    {
        defaultCase(node);
    }

    public void caseAIdLhs(AIdLhs node)
    {
        defaultCase(node);
    }

    public void caseAArrayrefLhs(AArrayrefLhs node)
    {
        defaultCase(node);
    }

    public void caseAListArglist(AListArglist node)
    {
        defaultCase(node);
    }

    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }

    public void caseAEmptydim(AEmptydim node)
    {
        defaultCase(node);
    }

    public void caseTIconst(TIconst node)
    {
        defaultCase(node);
    }

    public void caseTSconst(TSconst node)
    {
        defaultCase(node);
    }

    public void caseTClasstok(TClasstok node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTLength(TLength node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTCommentStart(TCommentStart node)
    {
        defaultCase(node);
    }

    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLe(TLe node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGe(TGe node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNe(TNe node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTLbrack(TLbrack node)
    {
        defaultCase(node);
    }

    public void caseTRbrack(TRbrack node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTLbrace(TLbrace node)
    {
        defaultCase(node);
    }

    public void caseTRbrace(TRbrace node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTCommentEnd(TCommentEnd node)
    {
        defaultCase(node);
    }

    public void caseTCommentBody(TCommentBody node)
    {
        defaultCase(node);
    }

    public void caseTCommentStar(TCommentStar node)
    {
        defaultCase(node);
    }

    public void caseTCommentSlash(TCommentSlash node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
