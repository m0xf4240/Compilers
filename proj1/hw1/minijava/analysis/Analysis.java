/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import minijava.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAVarMaindecl(AVarMaindecl node);
    void caseAMethodMaindecl(AMethodMaindecl node);
    void caseAListParamlist(AListParamlist node);
    void caseAEmptyParamlist(AEmptyParamlist node);
    void caseAParam(AParam node);
    void caseAPublicPrivacy(APublicPrivacy node);
    void caseABlankPrivacy(ABlankPrivacy node);
    void caseAType(AType node);
    void caseAWhileStmt(AWhileStmt node);
    void caseADeclStmt(ADeclStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAExprStmt(AExprStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseAPrintStmt(APrintStmt node);
    void caseAEmptyStmt(AEmptyStmt node);
    void caseAAssignExpr(AAssignExpr node);
    void caseAExprExpr(AExprExpr node);
    void caseAOrExpr10(AOrExpr10 node);
    void caseAExprExpr10(AExprExpr10 node);
    void caseAAndExpr20(AAndExpr20 node);
    void caseAExprExpr20(AExprExpr20 node);
    void caseAEqExpr30(AEqExpr30 node);
    void caseANeExpr30(ANeExpr30 node);
    void caseAExprExpr30(AExprExpr30 node);
    void caseALtExpr40(ALtExpr40 node);
    void caseALeExpr40(ALeExpr40 node);
    void caseAGeExpr40(AGeExpr40 node);
    void caseAGtExpr40(AGtExpr40 node);
    void caseAExprExpr40(AExprExpr40 node);
    void caseAPlusExpr50(APlusExpr50 node);
    void caseAMinusExpr50(AMinusExpr50 node);
    void caseATermExpr50(ATermExpr50 node);
    void caseATimesTerm(ATimesTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAPrimaryFactor(APrimaryFactor node);
    void caseAIdFactor(AIdFactor node);
    void caseALengthFactor(ALengthFactor node);
    void caseALength2Factor(ALength2Factor node);
    void caseANewarrayPrimary(ANewarrayPrimary node);
    void caseAPrimary2Primary(APrimary2Primary node);
    void caseAIconstPrimary2(AIconstPrimary2 node);
    void caseASconstPrimary2(ASconstPrimary2 node);
    void caseANullPrimary2(ANullPrimary2 node);
    void caseATruePrimary2(ATruePrimary2 node);
    void caseAFalsePrimary2(AFalsePrimary2 node);
    void caseAParensPrimary2(AParensPrimary2 node);
    void caseACallPrimary2(ACallPrimary2 node);
    void caseAArrayrefPrimary2(AArrayrefPrimary2 node);
    void caseANameArrayref(ANameArrayref node);
    void caseAPrimaryArrayref(APrimaryArrayref node);
    void caseAIdLhs(AIdLhs node);
    void caseAArrayrefLhs(AArrayrefLhs node);
    void caseAListArglist(AListArglist node);
    void caseAArg(AArg node);
    void caseAEmptydim(AEmptydim node);

    void caseTIconst(TIconst node);
    void caseTSconst(TSconst node);
    void caseTClasstok(TClasstok node);
    void caseTPublic(TPublic node);
    void caseTStatic(TStatic node);
    void caseTReturn(TReturn node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTThis(TThis node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTLength(TLength node);
    void caseTPrint(TPrint node);
    void caseTId(TId node);
    void caseTWhitespace(TWhitespace node);
    void caseTCommentStart(TCommentStart node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLt(TLt node);
    void caseTLe(TLe node);
    void caseTGt(TGt node);
    void caseTGe(TGe node);
    void caseTEq(TEq node);
    void caseTNe(TNe node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTLbrack(TLbrack node);
    void caseTRbrack(TRbrack node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTSemi(TSemi node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTComma(TComma node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentBody(TCommentBody node);
    void caseTCommentStar(TCommentStar node);
    void caseTCommentSlash(TCommentSlash node);
    void caseTLineComment(TLineComment node);
    void caseEOF(EOF node);
}
