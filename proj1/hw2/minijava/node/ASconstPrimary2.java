/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ASconstPrimary2 extends PPrimary2
{
    private TSconst _sconst_;

    public ASconstPrimary2()
    {
        // Constructor
    }

    public ASconstPrimary2(
        @SuppressWarnings("hiding") TSconst _sconst_)
    {
        // Constructor
        setSconst(_sconst_);

    }

    @Override
    public Object clone()
    {
        return new ASconstPrimary2(
            cloneNode(this._sconst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASconstPrimary2(this);
    }

    public TSconst getSconst()
    {
        return this._sconst_;
    }

    public void setSconst(TSconst node)
    {
        if(this._sconst_ != null)
        {
            this._sconst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sconst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sconst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sconst_ == child)
        {
            this._sconst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sconst_ == oldChild)
        {
            setSconst((TSconst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
